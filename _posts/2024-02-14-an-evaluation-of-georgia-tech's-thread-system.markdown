---
layout: post
title:  "An Evaluation of Georgia Tech's Thread System"
date:   2024-02-14 00:00:00 -0500
categories: Georgia Tech, Computer Science
---
As an addendum to my [prior post breaking down the threads for the CS major]({{ site.baseurl }}{% link _posts/2024-02-12-georgia-tech's-cs-threads-analyzed.markdown %}), here I'm going to evaluate the thread system as a whole compared to its alternatives.

# Evaluation Framework

To start, the following is my framework for defining degree programs: 
1. Degree Programs consist of 3 primary components: General Requirements (GRs), Major Requirements (MRs), & Major Specializations (MSs, typically elective/optional classes)
2. Degree programs vary in the proportion of GR, MR, & MS courses/credits required.

Here's an example of applying this framework:
1. Variance of GRs: When comparing liberal arts colleges (LACs) to institutes of technology (IOTs) for STEM majors, typically LACs either require more GR classes/credits or their GRs consist of less STEM classes relative to IOTs. This results in LACs giving a broader set of knowledge for students while IOTs give students a narrower, depth-focused experience into their STEM Major. Both of these outcomes have their advantages and disadvantages.

# CS Threads as a Case Study

Now, when comparing the CS Thread system to that of a traditional STEM degree program (i.e. Aerospace Engineering (AE)/Biomedical Engineering (BME), which include a couple options/depth electives & free/breadth electives respectively to complement their general major requirements) at Georgia Tech using the framework, it's clear Threads increase MS requirements and decrease MR requirements relative to the traditional alternative.

Now to evaluate whether this is beneficial or not requires an analysis of the extent of this tradeoff. To best illustrate this, the Georgia Tech website states that the thread combination between Systems & Architecture + Theory forms the basis of a "traditional CS degree" (which I agree with as in [my previous post on CS threads]({{ site.baseurl }}{% link _posts/2024-02-12-georgia-tech's-cs-threads-analyzed.markdown %}), I mention this thread combination as the ideal for a comprehensive CS degree). Assuming this thread combination then is equivalent to the CS analog of the aforementioned traditional degree programs, the following stands out:

1. This thread combination is almost agreed upon to be one of the toughest pairs
2. This thread combination includes various foundational CS courses (such as multiple courses in Data Structures, Algorithms, Complexity Theory, CS Math Fundamentals (Discrete Math, Combinatorics, Statistics, etc.), Computer Organization/Programming, Systems & Networks, Computer Architectures/OS Design, etc.) However, many other thread combinations may exclude courses covering these topics. For instance, the most extreme case is the People + Media combo, where anything beyond basic Data Structures & Algorithms is omitted on the Theory side and Computer Organization/Programming isn't even a required course (this applies to many other thread combinations, typically to a lesser extent), with these requirements replaced with courses covering human-centric technologies. As a result, This exclusion and replacement of courses covering these foundational CS concepts is likely the reason any other thread combination is considered "easier" than Systems & Architecture + Theory (which is the reason this traditional CS degree is so unpopular). 
3. The threads are restrictive in what electives CS majors can take. For instance, while in the traditional system, a CS Major could use their electives to study across topics (i.e. taking courses covering High-Performance Computing, Advanced Modeling Methods, Machine Learning, Computer Graphics, etc.), threads limit CS majors to taking electives within their concentration. As a result, take the following scenario (adapted from a real scenario I've heard from CS majors here): You're a CS Major with interested in pursuing the Theory + Modeling & Simulation (or for that matter, any non Intelligence thread) CS degree, but you'd like to take at least one course in AI/ML; to get this course, you'd have to temporarily change your thread to be Intelligence (because course selection is vetted by thread, with Intelligence being especially oversaturated), take the course, then switch back to your original threads, which is an inconvenient process because it prevents you from taking courses related to your actual threads during the switch. 

So to summarize, I believe in general, the extent of tradeoff between MR & MS is too significant to be practical. CS Majors coming out of Georgia Tech may be well versed in their specific threads, but they'll lack fundamental CS knowledge covered in other threads and won't be able to explore with upper-level classes outside their thread. Rephrased, I believe the thread system alters too much of the general Major CS Requirements and restricts CS majors into a subfield for their elective classes too early.

Now this increased depth for decreased breadth conclusion applies in general, but definitely should be evaluated on a case-by-case, thread by thread basis. This loss of breadth can typically be mitigated by selecting threads that complement rather than overlap each other (i.e. a ECE/EECS side thread (like Systems & Architecture, Information Internetworks, or Devices) combined with a Math/Data Science side thread (i.e. Theory, Intelligence, or Modeling & Simulation) will typically result in a degree with sufficient breadth). But, because this isn't a thread selection restriction for the degree, the selection of overlapping threads is common and even popular as it increases the ease of the degree by reducing the amount of content breadth (which we assume is roughly correlated with degree difficulty). 

There is one outstanding argument here: isn't a high level of specialization, especially in the initial degree, very beneficial for a job market such as CS centered around subject matter experts (SMEs)? This is true, and if one's ultimate paradigm is to enter industry under a specialization very quickly, then this makes the thread system extremely beneficial. However, my paradigm varies: I believe the undergraduate experience especially should consist of significant breadth as it increases exposure to skills/subjects in a safe environment with experts to support your learning. By increasing the subjects/skills exposed to, a student opens more doors for their future career outside college, whether that means more sectors in industry or expanding to academia, research, startups, etc. Additionally, students may be able to explore their interests more and find their true niche have they not already. Furthermore, specialization can be done through side projects, electives courses, or to the most intensive extent, higher education. In fact, currently I think the thread system's high level of course specialization approaches that of taking a masters degree in CS (without the sufficient undergraduate background), which is what makes the CS minor program, which also has this high level of thread specialization, beneficial as it's similar to a traditional MS CS than a traditional CS Minor. However, I will note my paradigm varies from the aforementioned industry-focused mindset because for CS especially, settling in industry early is so economically favorable (not just financially, but considering work-life balance and flexibility particularly with remote working) relative to the alternatives with a CS degree (such as academia or startups, which generally have lower financial outcomes with relatively more stressful work-life balance). As a result, why bother increasing the degree of difficulty if the end result of university will be the same regardless?

# Generalization to Other Major Threads

Now after discussing CS's Thread system, I do want to make note that threads exist in other degrees at Georgia Tech. However, their implementation varies significantly. For instance, here are 2 other degrees with threads:
- **Computer Engineering (CE)**: CE's thread system requires you take 1 CE thread, with the second thread allowed to be anything else from a set of Electrical Engineering, CE, & CS threads. In this way, fundamental CE courses will always be included in the required CE thread, with more specialization allowed through the broader choice thread
- **Industrial & Systems Engineering (ISYE)**: IYSE has a thread system, although the threads are simply specific combinations of the 5 elective courses required in the degree. Most of the degree consists of core requirements, which stay the same across threads. In this implementation, ISYE is essentially the same as a traditional degree (i.e. AE or BME), with the threads being designations for specific elective sequences taken

So in the end, the nonhomogeneity of the thread system across majors makes evaluating the thread system as a whole not so simple (again, required on a case-by-case basis). But ultimately, the takeaway of this evaluation wasn't to make a statement on the degree programs at Georgia Tech or specifically that of CS; it was to highlight the importance of choosing and customizing your degree and courses taken in university to your paradigm of a curriculum that's depth-specific (to end up as a subject-matter expert to enter industry or higher education research), breadth-specific (to increase the subjects of exposure and possible pathways one can take after college, including fields like consulting/management or higher education for specialization), or something in between.
